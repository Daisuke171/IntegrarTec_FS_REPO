import { DynamicModule, Type } from '@nestjs/common';
import { ModuleOverride } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/interfaces/module-override.interface';
import { DependenciesScanner } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/scanner';
import { ModuleCompiler } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/injector/compiler';
import { InstanceLoader } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/injector/instance-loader';
import { ModuleRef } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/injector/module-ref';
import { ModulesContainer } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/injector/modules-container';
import { LazyModuleLoaderLoadOptions } from '.pnpm/@nestjs+core@11.1.5_@nestjs+common@11.1.5_class-transformer@0.5.1_class-validator@0.14._9bae86774f5d9fb3c466b4dca259124f/node_modules/@nestjs/core/injector/lazy-module-loader/lazy-module-loader-options.interface';
export declare class LazyModuleLoader {
    private readonly dependenciesScanner;
    private readonly instanceLoader;
    private readonly moduleCompiler;
    private readonly modulesContainer;
    private readonly moduleOverrides?;
    constructor(dependenciesScanner: DependenciesScanner, instanceLoader: InstanceLoader, moduleCompiler: ModuleCompiler, modulesContainer: ModulesContainer, moduleOverrides?: ModuleOverride[] | undefined);
    load(loaderFn: () => Promise<Type<unknown> | DynamicModule> | Type<unknown> | DynamicModule, loadOpts?: LazyModuleLoaderLoadOptions): Promise<ModuleRef>;
    private registerLoggerConfiguration;
    private createLazyModulesContainer;
    private getTargetModuleRef;
}
